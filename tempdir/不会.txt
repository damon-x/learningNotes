介绍自己的项目，数据库中用到的数据结构数据模型，死锁的概念（问的应该是数据库的死锁），如何避免死锁?

一致性hash算法  N

IO缓冲区（buffer）的原理及作用       【done in note

sql代码中如何使用如何定义一个事务      【注解@transcaion

hashmap扩容机制

查看GC状态  【done in note

TIME_WAIT为什么要等待2MSL。
如果等待就关闭了，最后一个发出去的确认对方关闭的信息丢了的话，对方超时重传过来的请求关闭信息就无人应答，造成对方一直请求关闭。
第一，为了保证A发送的最后一个ACK报文能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认。B会超时重传这个FIN+ACK报文段，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。如果A在TIME-WAIT状态不等待一段时间，而是在发送完ACK报文段后就立即释放连接，就无法收到B重传的FIN+ACK报文段，因而也不会再发送一次确认报文段。这样，B就无法按照正常的步骤进入CLOSED状态。 
第二，A在发送完ACK报文段后，再经过2MSL时间，就可以使本连接持续的时间所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求的报文段。     

ConcurrentHashMap的实现原理(JDK1.7和JDK1.8)

CopyOnWriteArrayList

方法区溢出，动态造大量类如用cglib、jdk6及之前用intern方法将字符串放在方法区也可以，但6之后字符串池放到堆中了。

String s = new String("1");   在7及以上中会再内存和堆中常量池同时创建两个实例，引用不同
String s3 = new String("1") + new String("2");     在7及以上中只在内存中创建实例，堆中没有
s3.intern();     在7及以上中将s3的引用向池中复制一份，引用相同
java6中池在方法区

自旋锁优点：不阻塞，节省线程切换开销

工具定位问题
3使用jstat，visualvm和gc日志分析延迟和饿饿吞吐量，然后更改配置进行调优。
比如更换垃圾回收器，更改内存空间，设定晋升阈值等等。
4 如果定位出是内存问题，比如oom或者内存泄漏，可以通过dump文件转储的方式，再配合mat等工具对内存进行分析。
5 如果定位出是程序问题，比如代码执行错误，代码运行时间过长。cpu占用过率过高（可能死锁或并发量太大），可以通过visualvm分析线程，定位线程以后再通过jstack的方式定位代码问题。当然也可以通过日志的方式定位。


事务隔离级别：读未提交    读提交    可重复读    串行化   


死锁条件
+ 互斥:资源的锁是排他性的，加锁期间只能有一个线程拥有该资源。其他线程只能等待锁释放才能尝试获取该资源。
    + 请求和保持:当前线程已经拥有至少一个资源，但其同时又发出新的资源请求，而被请求的资源被其他线程拥有。此时进入保持当前资源并等待下个资源的状态。
    + 不剥夺：线程已拥有的资源，只能由自己释放，不能被其他线程剥夺。
    + 循环等待：是指有多个线程互相的请求对方的资源，但同时拥有对方下一步所需的资源。形成一种循环，类似2)请求和保持。但此处指多个线程的关系。并不是指单个线程一直在循环中等待。


1.8下ConcurrentHashMap
在ConcurrentHashMap中通过一个Node<K,V>[]数组来保存添加到map中的键值对，而在同一个数组位置是通过链表和红黑树的形式来保存的。但是这个数组只有在第一次添加元素的时候才会初始化，否则只是初始化一个ConcurrentHashMap对象的话，只是设定了一个sizeCtl变量，这个变量用来判断对象的一些状态和是否需要扩容，后面会详细解释。
　　第一次添加元素的时候，默认初期长度为16，当往map中继续添加元素的时候，通过hash值跟数组长度取与来决定放在数组的哪个位置，如果出现放在同一个位置的时候，优先以链表的形式存放，在同一个位置的个数又达到了8个以上，如果数组的长度还小于64的时候，则会扩容数组。如果数组的长度大于等于64了的话，在会将该节点的链表转换成树。
　　通过扩容数组的方式来把这些节点给分散开。然后将这些元素复制到扩容后的新的数组中，同一个链表中的元素通过hash值的数组长度位来区分，是还是放在原来的位置还是放到扩容的长度的相同位置去 。在扩容完成之后，如果某个节点的是树，同时现在该节点的个数又小于等于6个了，则会将该树转为链表


Redis应用场景（不顺便问问内部的数据结构么…）
排行榜（zset的权重），热点数据 = 缓存（淘汰机制，LRU FIFO，时间过期），异步的消息队列（list），计数器，分布式锁。

数据库三大范式
1．第一范式(确保每列保持原子性)
如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。
2．第二范式(确保表中的每列都和主键相关)
确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）
3．第三范式(确保每列都和主键列直接相关,而不是间接相关)


innodb和myisam差异
区别：
（1）事务处理：
MyISAM是非事务安全型的，而InnoDB是事务安全型的（支持事务处理等高级处理）；
（2）锁机制不同：
MyISAM是表级锁，而InnoDB是行级锁；
（3）select ,update ,insert ,delete 操作：
MyISAM：如果执行大量的SELECT，MyISAM是更好的选择
InnoDB：如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表
（4）查询表的行数不同：
MyISAM：select count() from table,MyISAM只要简单的读出保存好的行数，注意的是，当count()语句包含 where条件时，两种表的操作是一样的
InnoDB ： InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行
（5）外键支持：
mysiam表不支持外键，而InnoDB支持
为什么MyISAM会比Innodb 的查询速度快。
INNODB在做SELECT的时候，要维护的东西比MYISAM引擎多很多；
1）数据块，INNODB要缓存，MYISAM只缓存索引块， 这中间还有换进换出的减少；
2）innodb寻址要映射到块，再到行，MYISAM 记录的直接是文件的OFFSET，定位比INNODB要快
3）INNODB还需要维护MVCC一致；虽然你的场景没有，但他还是需要去检查和维护
MVCC ( Multi-Version Concurrency Control )多版本并发控制
应用场景
MyISAM适合：(1)做很多count 的计算；(2)插入不频繁，查询非常频繁；(3)没有事务。
InnoDB适合：(1)可靠性要求比较高，或者要求事务；(2)表更新和查询都相当的频繁，并且行锁定的机会比较大的情况。
总结一下就是：
1 innodb支持外键，事务以及行级锁，另外还支持聚簇索引。

2 而mysiam不支持上述特性，但是他在count场景速度快（因为保存了行数）。

3 另外由于innodb需要维护聚簇索引，以及事务的MVCC特性，需要额外的开销。所以在查询方面，innodb可能会稍逊一筹。

4 而插入方面，由于innodb支持行级锁，所以对于行级插入删除速度很快。
最后一题是让我设计一个爬虫系统并将信息进行展示，用户可以查询，说是要看我系统设计思维。

对象头
https://www.jianshu.com/p/3d38cba67f8b

Java 中的 Monitor 机制
https://www.jianshu.com/p/7f8a873d479c

yield()
yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。
结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。


锁升级

项目中用过什么面向对象的设计原则、设计模式

数据库的行级锁和表级锁
https://www.cnblogs.com/guanghe/p/9217421.html

MVCC
Mysql的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，他们一般都同时实现了MVCC.实现了非阻塞的读操作，写操作也只锁定必要的行。
MVCC的实现，是通过保存数据在某个时间点的快照来实现的。即为：不管需要执行多长时间，每个事务看到的数据都是一致的。
不同的存储引擎的MVCC实现不同，典型的有乐观并发控制和悲观并发控制。
innodb的MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个是行的创建时间，一个保存行的过期时间。存储的是系统版本号，不是真实的时间。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。
在REPEATABLE READ隔离级别下，MVCC具体操作：
SELECT
　　innodb会根据以下两个条件检查每行记录：
　　　　a.innodb只查找版本号早于当前事务版本的数据行，<=当前事务版本号，这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的
　　　　b.行的删除版本要么未定义，要么大于当前的事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。
INSERT
　　INNODB为新插入的每一行保存当前系统版本号作为行版本号
DELETE
　　innodb为删除的每一行保存当前系统版本号作为行删除标识
UPDATE
　　innodb为插入一行新纪录，保存当前系统版本号为行版本号，同时保存当前系统版本号到原来的行作为行删除标识
MVCC只在repeatable read和read committed两个隔离级别下工作。其他两个隔离级别和MVCC不兼容。因为READ UNCOMMITTED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而SERIALIZABLE 则会对所有读取的行都加锁。

为什么TCP是可靠传输的
1 滑动窗口实现了有序传输，确认传输，超时重传等机制确保可靠性。
2 连续发送和确认提高效率，缓存数据包提高效率。
3 检验和保证正确性。
4 拥塞控制避免网络拥堵。流量控制保证收发速率合理

6.聊聊数据库的事务(acid,4个隔离级别，[底层实现]  :加锁)
mvcc和加锁

fork-join

触发full gc
一般起因是young gc不能解决问题。
（1）调用System.gc时，系统建议执行Full GC，但是不必然执行
（2）老年代空间不足
（3）方法去空间不足
（4）之前历代通过Minor GC后进入老年代的平均大小大于老年代的可用内存
（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小
 https://www.cnblogs.com/happyflyingpig/p/8028338.html
https://www.cnblogs.com/xifenglou/p/9045447.html
https://blog.csdn.net/scugxl/article/details/50935863

触发yongGC
当新生代满时，会触发young gc ，但在young gc前会做一些判断
1、在YGC执行前，min(目前新生代已使用的大小,之前平均晋升到old的大小中的较小值) > 旧生代剩余空间大小 ? 不执行YGC，直接执行Full GC : 执行YGC；
2、在YGC执行后，平均晋升到old的大小 > 旧生代剩余空间大小 ? 触发Full GC ： 什么都不做。
https://www.spirithy.com/2019/04/01/trigger-jvm-full-gc-young-gc/

ThreadLocal
本质是一个hashmap。内存泄漏解决

重要：synchronized修饰不加static的方法，锁是加在单个对象上，不同的对象没有竞争关系；修饰加了static的方法，锁是加载类上，这个类所有的对象竞争一把锁.


从大文本中找到字符的数量
public static int getKeyStringCount(String str, String key) {          
         int count = 0;  
         int index = 0;             
         while((index = str.indexOf(key,index))!=-1){                 
             index = index + key.length();  
             count++;                 
         }              
         return count;  
     }  


红黑树满足红黑性质：
1. 每个节点是红色或者黑色的
2. 根节点是黑色的，叶节点（NIL）是黑色的
3. 红色节点的两个子节点都是黑色的
4. 根节点是黑色
5. 对每个结点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。（因为所有路径的黑色节点相同，且红色节点的子节点必然是黑色，于是最长的路径中，是红黑相间的(2n-1)，最短路径是纯黑大的，差为(n-1)，小于n，故没有一条路径会比其他路径长出2倍）。

问：分布式锁怎么实现？
答：mysqlrediszookeeper

spring token 及前端存储

问：mysq使用多个索引的查询怎么运行
答：and交集

or容易使查询放弃索引，但不一定。

#### 索引下推
&emsp;&emsp;Mysql5.6特性，使and限定A、B、C三列条件，当不使用索引下推时，通过索引将A符合的索引拿出来，到数据库取数据返回mysql服务端，maysql服务端再对B、C筛选。使用索引下推后，通过A筛选索引，先不去数据库拿数据，继续通过B、C筛选，得出最终符合的索引结果后再去取数据。（不是索引覆盖哦）

or如果使用了非索引字段则整个查询都不会走索引。

问：看你知道并发，进程间交互方式了解不？
答：匿名管道，命名管道。。。。。bla
1 管道（半双工），消息队列（存储消息，通知进程），信号量（封装好的管程），socket，共享内存

final在多线程中的用法
好处：保证在构造函数中的变量设置，对其它线程来说，都是可见的。而且对于通过final变量到达的任意变量，对其它线程也是可见的，例如final Map变量里面的值。（还不太理解）
https://blog.csdn.net/xiaoxiaoxuanao/article/details/52573859

CMS垃圾回收过程
CMS 收集器（多线程标记清除算法）
Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾
回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。
最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。
CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：
2.7.6.1. 初始标记
只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。
13/04/2018 Page 34 of 283
2.7.6.2. 并发标记
进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。
2.7.6.3. 重新标记
为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记
记录，仍然需要暂停所有的工作线程。
2.7.6.4. 并发清除
清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并
发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看
CMS 收集器的内存回收和用户线程是一起并发地执行。

读取大文件方式：
　　2.分块读取； 就是普通的流式读
　　3.采用内存映射技术。使用虚拟内存

线程池实现原理：就是往池里加任务的过程代码。

抽象类和接口的异同点
接口和抽象类的区别：
（1）抽象类可以有构造方法，接口中不能有构造方法。
（2）抽象类中可以有普通成员变量，接口中没有普通成员变量
（3）抽象类中可以包含静态方法，接口中不能包含静态方法
（4） 一个类可以实现多个接口，但只能继承一个抽象类。
（5）接口可以被多重实现，抽象类只能被单一继承
（6）如果抽象类实现接口，则可以把接口中方法映射到抽象类中作为抽象方法而不必实现，而在抽象类的子类中实现接口中方法
接口和抽象类的相同点：
(1) 都可以被继承
(2) 都不能被实例化
(3) 都可以包含方法声明
(4) 派生类必须实现未实现的方法

TCP/IP分层模型的四个协议层分别完成以下的功能：
第一层 网络接口层
网络接口层包括用于协作IP数据在已有网络介质上传输的协议。
协议：ARP,RARP
第二层 网间层
网间层对应于OSI七层参考模型的网络层。负责数据的包装、寻址和路由。同时还包含网间控制报文协议(Internet Control Message Protocol,ICMP)用来提供网络诊断信息。
协议：本层包含IP协议、RIP协议(Routing Information Protocol，路由信息协议)，ICMP协议。
第三层 传输层
传输层对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。
其中TCP协议(Transmission Control Protocol)提供可靠的数据流运输服务，UDP协议(Use Datagram Protocol)提供不可靠的用户数据报服务。
第四层 应用层
应用层对应于OSI七层参考模型的应用层和表达层。
因特网的应用层协议包括Finger、Whois、FTP(文件传输协议)、Gopher、HTTP(超文本传输协议)、Telent(远程终端协议)、SMTP(简单邮件传送协议)、IRC(因特网中继会话)、NNTP（网络新闻传输协议）等。

TCP三次握手的第三次的 ack包丢失会怎样
Server 端
    第三次的ACK在网络中丢失，那么Server 端该TCP连接的状态为SYN_RECV,并且会根据 TCP的超时重传机制，会等待3秒、6秒、12秒后重新发送SYN+ACK包，以便Client重新发送ACK包。
而Server重发SYN+ACK包的次数，可以通过设置/proc/sys/net/ipv4/tcp_synack_retries修改，默认值为5.
如果重发指定次数之后，仍然未收到 client 的ACK应答，那么一段时间后，Server自动关闭这个连接。
Client 端
在linux c 中，client 一般是通过 connect() 函数来连接服务器的，而connect()是在 TCP的三次握手的第二次握手完成后就成功返回值。也就是说 client 在接收到 SYN+ACK包，它的TCP连接状态就为 established （已连接），表示该连接已经建立。那么如果 第三次握手中的ACK包丢失的情况下，Client 向 server端发送数据，Server端将以 RST包响应，方能感知到Server的错误。

ACID是什么


